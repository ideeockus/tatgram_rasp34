from aiogram import executor, types, Dispatcher
from bot_storage.Keyboards import guest_kb
from aiogram.dispatcher import FSMContext
from bot_storage.UserStates import GuestStates, get_role_waiting_for_action_state
from bot import dp, bot
from bot_storage.accounts_base import get_role
from handlers import common_handlers, guest_handlers, teacher_handler, pupil_handler, master_handler  # handlers
from bot_storage import accounts_base
from bot_storage.configuration import feedback_tg_id, creator_id
from bot_storage.accounts_base import Roles
from utils.scheduled_tasks import set_weakly_stats_clear_task
from actions.notify_actions import quiet_admin_notification
from middlewares.common_middleware import CommonMiddleware
from bot_storage import Keyboards


@dp.message_handler()
async def unregistered_msg(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_role = accounts_base.get_role(user_id)
    print(" - unregistered message", user_id, user_role)
    if user_role is None:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=guest_kb)
        await GuestStates.waiting_for_action.set()
    else:
        await define_action(message, state)


async def define_action(message: types.Message, state: FSMContext):
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    (–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–æ—Å—Ä–µ–¥–∏ –¥–∏–∞–ª–æ–≥–∞)
    """
    user_id = str(message.from_user.id)
    user_role = accounts_base.get_role(user_id)
    if user_role == Roles.pupil or user_role == Roles.parent or user_role == Roles.headman:
        await pupil_handler.PupilStates.waiting_for_action.set()
        if message.text in ["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –∑–∞–≤—Ç—Ä–∞"]:
            await pupil_handler.rasp_today_yesterday(message, state)
        elif message.text == "–ü–æ –¥–Ω—è–º":
            await pupil_handler.rasp_by_day(message, state)
        elif message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            await pupil_handler.pupil_feedback(message)
        elif message.text == "–î–ª—è –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞":
            await pupil_handler.req_rasp_for_other_class(message)
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π":
            await pupil_handler.teacher_rasp(message)
        else:
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=Keyboards.pupil_kb)
    elif user_role == Roles.teacher:
        await teacher_handler.TeacherStates.waiting_for_action.set()
        if message.text == "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await teacher_handler.rasp(message, state)
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π":
            await teacher_handler.other_teachers_rasp(message)
        elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
            await teacher_handler.wanna_send_photo(message)
        else:
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=Keyboards.teacher_kb)
    elif user_role == Roles.master:
        await master_handler.MasterStates.waiting_for_action.set()
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –£–≤–µ–¥–æ–º–ª—è—é —á—Ç–æ —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª—Å—è",
                             reply_markup=Keyboards.master_kb)
        if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await master_handler.stats(message)
        elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
            await master_handler.broadcast(message)
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤":
            await master_handler.pupils_rasp(message)
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π":
            await master_handler.teachers_rasp(message)
        elif message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await master_handler.upload_rasp(message)
        else:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")


@dp.message_handler(state="*")
async def other_msg(message: types.Message, state: FSMContext):
    print(f"other message, state: {await state.get_state()}; state_data: {await state.get_data()}")
    user_state = await state.get_state()

    if user_state == get_role_waiting_for_action_state(get_role(message.from_user.id)).state:
        # for base state
        print("message ignored")
        # await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å")
        # await message.reply("Throttle rate 2")
        # await dp.throttle(key="1", rate=2, user_id=message.from_user.id)
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@dp.callback_query_handler(state="*")
async def empty_callback_query(callback_query: types.CallbackQuery, state: FSMContext):
    print(f"unrecognized callback query, callback_data: {callback_query.data}; state: {await state.get_state()}")
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)


@dp.errors_handler()
async def error_handler(update: types.Update, exception: Exception):
    error_info_message = "–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ üôÑ, –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ä–∞ –≤—ã–∑—ã–≤–∞—Ç—å –º–∞–≥–æ–≤ üîÆ\n\n"
    try:
        error_info_message = "üôÑüôÑüôÑ\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" \
                             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " \
                             f"@{update.message.from_user.username} [{update.message.from_user.id}]\n" \
                             f"{update.message.from_user.full_name}\n" \
                             f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}\n\n" \
                             "–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö.\n" + str(exception)
    except Exception as e:
        error_info_message += f"–ù—É, –∑–∞—Ç–æ –≤–æ—Ç –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:\n {e}\n\n"
        error_info_message += f"–ò –µ—â–µ –≤–æ—Ç –∫–∞–∫–∞—è-—Ç–æ —à—Ç—É–∫–∞:\n {str(exception)}"
    if feedback_tg_id == creator_id:
        await bot.send_message(creator_id, error_info_message)
        return
    await bot.send_message(feedback_tg_id, error_info_message)
    await bot.send_message(creator_id, error_info_message)
    # ## psycopg2.errors.AdminShutdown exception handler ?


async def on_aiogram_startup(aiogram_dp: Dispatcher):
    # await quiet_admin_notification("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ü§ñ")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ü§ñ")
    set_weakly_stats_clear_task(False)


async def on_aiogram_shutdown(aiogram_dp: Dispatcher):
    await quiet_admin_notification("–ë–æ—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è. –î–æ —Å–≤—è–∑–∏ üòµ")
    print("–ë–æ—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è. –î–æ —Å–≤—è–∑–∏ üòµ")

if __name__ == '__main__':
    dp.middleware.setup(CommonMiddleware())
    executor.start_polling(dp, skip_updates=True, on_startup=on_aiogram_startup, on_shutdown=on_aiogram_shutdown)
